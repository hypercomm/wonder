The main WONDER conceptual principle leverage the usage of scripts (Javascripts) by WebRTC Applications to implement signaling protocol stacks that are used to handle messages exchanged between peers. This means, the message server and associated protocol stack can be selected, loaded and instantiated during runtime. Such characteristic enables signaling protocols selected per WebRTC Conversation to ensure full Signaling interoperability among peers using Triangle based Network topologies. Such mechanism we call Signalling on-the-fly. Before we describe it in detail let’s first define needed terminology. teste

**Domain Channel**: the signaling channel that is established with domain’s messaging server as soon as the user is registered and is online.

**Transient Channel**: the signaling channel that is established, typically with an external messaging server (i.e. from another domain) on the scope of a certain conversation.

**Messaging Stub**: the script containing the protocol stack and all the logic needed to establish a Channel to a certain Messaging Server.

**Conversation Host**: the Conversation Host is the Message Server that is used to support all conversation messages exchanged among peers belonging to different domains. The host peer uses Domain channels and the other peers use Transient Channels.

Let’s use the classic Alice and Bob example to better explain the concept assuming they are registered in different Service Provider domains. In case Alice wants to talk to Bob by using Bob’s RTC identity e.g. bob@domain.com, the following steps will be performed:
* Information about the Identity of Bob including Bob’s MessagingStub restful service provider endpoint is provided and asserted by Bob’s IdP,
* Alice downloads and instantiates Bob’s Messaging Stub in her browser to setup a Transient Channel with Bob’s domain Messaging Server,
* As soon as the Transient Channel is established, Alice can send an Invitation message to Bob containing her SDP offer,
* Since Bob is connected in the same Message Server via his Domain Channel, he will receive Alice’s invitation in his Browser. If Bob accepts the invitation, an Accepted message containing Bob SDP response will be send to Alice.
* As soon as Alice’s browser receives Bob’s SDP, the media and/or data streams can be directly connected between the two browsers.

![signalling on-the-fly concept](https://github.com/hypercomm/wonder/raw/master/docs/images/signalling-on-the-fly.png)

This scenario implies that, since the Conversation is hosted by the called party by using its Messaging server, the called party domain is spending more resources than the calling party domain. In case this solution is not acceptable, Conversations can also be hosted by calling parties. The main differences are:

* A notification restful service endpoint is asserted from Bob’s IdP which is used to push an invitation message towards Bob device,
* The Identity of Alice including Alice’s MessagingStub URI is provided and asserted by Alice’s IdP,
* In case Bob accepts Alice invitation, Bob downloads and instantiates Alice’s Messaging Stub in her browser to setup a Transient Channel with Alice’s domain Messaging Server
* As soon as the Transient Channel is established, Bob can send an ACCEPTED message to Alice containing her SDP offer. 
* Since Alice is connected in the same Message Server via her Domain Channel, she will receive Bob’s SDP and the media and/or data streams can be directly connected between the two browsers.

![Conversation Hosted by calling peer](https://github.com/hypercomm/wonder/raw/master/docs/images/Conversation%20Hosted%20by%20calling%20peer.png)

**Conversation Hosted by calling peer**

The signaling on-the-fly concept can also be applied to support interoperability with legacy networks (e.g. IMS and PSTN) by using a Messaging GW that will convert the signaling protocol used in the WebRTC device into the signaling protocol used in the legacy network.

![Interworking with Legacy networks, e.g. IMS](https://github.com/hypercomm/wonder/raw/master/docs/images/Interworking%20with%20Legacy%20networks%2C%20e.g.%20IMS.png)

**Interworking with Legacy networks, e.g. IMS**

